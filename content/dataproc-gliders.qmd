---
title: Glider Data Processing
---

## Background

Historically, the ESD glider team has processed glider data using the Matlab toolbox [SOCIB](https://github.com/socib/glider_toolbox). However, this toolbox is not actively maintained, and the majority of ESD processing efforts have moved to Google Cloud (GCP). Thus, current efforts both leveraging existing and developing new Python code, with an Open Science approach, to process ESD glider data in GCP. This code/these scripts live in the [glider-utils]https://github.com/SWFSC/glider-utils repo. 

This section describes these efforts, as well as planned areas of future development. For acoustic or image processing workflows, see here (todo) and here (todo), respectively.

Todo: create and add flow chart, a la [here](https://github.com/SAEL-SWFSC/SAEL-lab-manual/blob/main/content/images/FOSSA.JPG)

## Base Processing

The base glider data processing is primarily done using [PyGlider](https://github.com/c-proof/pyglider), hereafter simply 'pyglider'. pyglider takes in binary data files from Teledyne/Webb Slocum gliders, and creates CF-compliant NetCDF files. These NetCDF files will be both used internally in further workflows, and sent to the [NGDAC](https://ioos.github.io/glider-dac/index.html).

### Level 1 - Timeseries

Workflow:

1. Binary and cache files from the glider are properly archived in GCS bucket (see here - todo). 
2. Create deployment YAML file. Currently by hand, in the future ideally thorugh code pulling from the Glider&Mooring database
3. Run pyglider and create output NetCDF files using the script [binary_to_nc.py](https://github.com/SWFSC/glider-utils/blob/main/scripts/binary_to_nc.py)
3. ...

#### Output NetCDF File

Todo: Notes about the structure of and variables in the output NetCDF file

#### Processing Notes

This section describes the default pyglider behavior when processing binary glider files using the function pyglider.slocum.binary_to_timeseries. This function uses [dbdreader](https://github.com/smerckel/dbdreader) to read slocum glider data from binary files. More discussion can be found [here](https://github.com/c-proof/pyglider/issues/106) around why and how pyglider switched to using dbdreader. 

As constructed, binary_to_timeseries uses dbdreader's [get_sync](https://dbdreader.readthedocs.io/en/latest/multiple_files.html#dbdreader.MultiDBD.get_sync) to extract values for all of the specified sensors. Thus, the user specifies a particular sensor to server as the ‘time_base’, and then all other desired variables (across science and engineering: pressure, temperature, oxygen, roll, etc.) are interpolated onto the same time base (i.e., the timestamps where this ‘time_base’ variable has a valid (not missing/nan) value). This makes life difficult if different sensors have different sampling strategies, and does not allow users to extract non-interpolated data. Adding a 'union' behavior option is currently under discussion in [this issue](https://github.com/c-proof/pyglider/issues/170) and this [pull request](https://github.com/c-proof/pyglider/pull/171). For now, [binary_to_nc.py](https://github.com/SWFSC/glider-utils/blob/main/scripts/binary_to_nc.py) generates several datasets, and merges them together to have all variables/relevant timestamps in one file.

Data alterations, or additional features of note:

- dbdreader:
    - dbdreader throws an error if a sensor is turned off and thus not present in some sbd/tbd or dbd/ebd files. For example, if the oxygen sensor is turned off halfway through a deployment, although this would apply to any sensor that is turned off. However, it looks like this behavior may be [fixed soon](https://github.com/smerckel/dbdreader/issues/26). 
    - dbdreader by default skips the first line of each binary file. The reasoning is that “this line contains either nonsense values, or values that were read a long time ago. This behavior can be changed.” See [here](https://github.com/smerckel/dbdreader/issues/18) for more discussion. 
    - dbdreader only identifies sensors as 'engineering' or 'science'. Thus, when extracting e.g. data for the sensor 'sci_oxy4_oxygen', dbdreader uses the 'sci_m_present_time' as the timestamp, rather than 'sci_oxy4_present_time'.
- pyglider: 
    - Latitude and longitude values are set to nan if their absolute value is greater than 90 and 180, respectively. 
    - Any values of zero from science sensors are converted to nan. 
    - No other data alterations are made (e.g., CTD data is all read and left as-is).

### Level 2 - Gridded

pyglider has a function ncprocess.make_gridfiles for making gridded data. This function takes the above timeseries file as input.

### IOOS NGDAC

pyglider has a function ncprocess.extract_timeseries_profiles for creating profile files for submission to the NGDAC. This function takes the above timeseries file as input.

## Future steps

qc/data cleaning -> cleaned netcdf files
- Implement [IOOS QARTOD](https://ioos.noaa.gov/project/qartod/) tests, eg using [ioos_qc](https://github.com/ioos/ioos_qc) to add qc flags
- other qc/data cleaning? For instance, sanity check ts plots. Likely will involve by-hand inspection for each deployment, including removing bad data if discovered

[GliderTools](https://github.com/GliderToolsCommunity/GliderTools): additional processing functionality
- [manuscript](https://doi.org/10.3389/fmars.2019.00738)
- optics, pq: quenching correction method described by Thomalla et al. (2018)
- additional qc tools?
- calculate cool physics things (mixed layer depth, ...)
- several plotting routines
